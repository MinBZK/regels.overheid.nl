services:
  cms:
    container_name: regels_cms
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://cms:9001']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    build:
      context: .
      dockerfile: apps/cms/Dockerfile
      target: dev
      args:
        PUBLIC_URL: http://localhost/cms/
        GID: ${GID:-1001}
        UID: ${UID:-1001}
    volumes:
      - ./apps/cms/config:/app/apps/cms/config
      - ./apps/cms/database:/app/apps/cms/database
      - ./apps/cms/public:/app/apps/cms/public
      - ./apps/cms/src:/app/apps/cms/src
    environment:
      - PUBLIC_URL=http://localhost/cms/
      - DATABASE_CLIENT=postgres
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/strapi
      - JWT_SECRET=jwt-secret
      - ADMIN_JWT_SECRET=admin-jwt-secret
      - API_TOKEN_SALT=token-salt
      - APP_KEYS=a,b,c
      - VIRTUAL_HOST=localhost
      - VIRTUAL_PATH=/cms/
      - VIRTUAL_DEST=/
      - VIRTUAL_PORT=9001
  docs:
    container_name: regels_docs
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://docs:9002']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    volumes:
      - ./apps/docs/docs:/app/apps/docs/docs
      - ./apps/docs/static:/app/apps/docs/static
      - ./apps/docs/src:/app/apps/docs/src
    ports:
      - 9002:9002
    build:
      context: .
      dockerfile: apps/docs/Dockerfile
      target: dev
      args:
        GID: ${GID:-1001}
        UID: ${UID:-1001}
    environment:
      - PORT=9002
      - BASE_URL=/docs/
      - VIRTUAL_HOST=localhost
      - VIRTUAL_PATH=/docs/
      - VIRTUAL_DEST=/docs/
      - VIRTUAL_PORT=9002
  docs-beta:
    container_name: regels_docs_beta
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://docs-beta:9003']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    volumes:
      - ./apps/docs-beta/docs:/app/apps/docs-beta/docs
      - ./apps/docs-beta/static:/app/apps/docs-beta/static
      - ./apps/docs-beta/src:/app/apps/docs-beta/src
    build:
      context: .
      dockerfile: apps/docs-beta/Dockerfile
      target: dev
      args:
        GID: ${GID:-1001}
        UID: ${UID:-1001}
    ports:
      - 9003:9003
    environment:
      - PORT=9003
      - BASE_URL=/docs-beta/
      - VIRTUAL_HOST=localhost
      - VIRTUAL_PATH=/docs-beta/
      - VIRTUAL_DEST=/docs-beta/
      - VIRTUAL_PORT=9003
  web:
    container_name: regels_web
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://web:9000']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    volumes:
      - ./apps/web/src:/app/apps/web/src
      - ./apps/web/public:/app/apps/web/public
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: dev
      args:
        GID: ${GID:-1001}
        UID: ${UID:-1001}
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/strapi
      - CMS_URL=http://cms:1337
      - NEXT_PUBLIC_CMS_URL=http://localhost/cms
      - WEB_URL=http://localhost:1337
      - NEXT_PUBLIC_WEB_URL=http://localhost
      - VIRTUAL_HOST=localhost
      - VIRTUAL_PATH=/
      - VIRTUAL_DEST=/
      - VIRTUAL_PORT=9000
  storybook:
    container_name: regels_storybook
    restart: unless-stopped
    volumes:
      - ./apps/web/src:/app/apps/web/src
      - ./apps/web/public:/app/apps/web/public
      - ./apps/web/.storybook:/app/apps/web/.storybook
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: storybook-dev
      args:
        GID: ${GID:-1001}
        UID: ${UID:-1001}
    ports:
      - 6006:6006
    environment:
      - VIRTUAL_HOST=localhost
      - VIRTUAL_PATH=/storybook/
      - VIRTUAL_DEST=/
      - VIRTUAL_PORT=6006
  postgres:
    image: postgres:14.5
    container_name: regels_postgres
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - regels-pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=strapi
    ports:
      - 5433:5432
  nginx:
    container_name: regels_nginx_proxy
    image: nginxproxy/nginx-proxy:latest
    restart: unless-stopped
    ports:
      - '80:80'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
volumes:
  regels-pgdata:
